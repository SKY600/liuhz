(window.webpackJsonp=window.webpackJsonp||[]).push([[11],{281:function(a,t,s){"use strict";s.r(t);var e=s(14),r=Object(e.a)({},(function(){var a=this,t=a.$createElement,s=a._self._c||t;return s("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[s("p",[a._v("WEB 攻击方式")]),a._v(" "),s("h1",{attrs:{id:"一、定义"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#一、定义"}},[a._v("#")]),a._v(" 一、定义")]),a._v(" "),s("p",[a._v("Web攻击（WebAttack）是针对用户上网行为或网站服务器等设备进行攻击的行为。如植入恶意代码，修改网站权限，获取网站用户隐私信息等等。")]),a._v(" "),s("p",[a._v("站点安全就是为保护站点不受未授权的访问、使用、修改和破坏而采取的行为或实践。")]),a._v(" "),s("h1",{attrs:{id:"二、常见方式"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#二、常见方式"}},[a._v("#")]),a._v(" 二、常见方式")]),a._v(" "),s("h2",{attrs:{id:"xss-cross-site-scripting-跨站脚本攻击"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#xss-cross-site-scripting-跨站脚本攻击"}},[a._v("#")]),a._v(" XSS (Cross Site Scripting) 跨站脚本攻击")]),a._v(" "),s("p",[a._v("允许攻击者将恶意代码植入到提供给其它用户使用的页面中。XSS涉及到三方，即攻击者、客户端与Web应用。")]),a._v(" "),s("h3",{attrs:{id:"类型-存储型xss攻击、反射型xss攻击、dom型xss攻击"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#类型-存储型xss攻击、反射型xss攻击、dom型xss攻击"}},[a._v("#")]),a._v(" 类型：存储型xss攻击、反射型xss攻击、DOM型xss攻击")]),a._v(" "),s("h4",{attrs:{id:"存储型xss攻击"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#存储型xss攻击"}},[a._v("#")]),a._v(" 存储型xss攻击")]),a._v(" "),s("ol",[s("li",[a._v("攻击者将恶意代码提交到目标网站的数据库中")]),a._v(" "),s("li",[a._v("用户打开目标网站时，网站服务端将恶意代码从数据库取出，拼接在 HTML 中返回给浏览器")]),a._v(" "),s("li",[a._v("用户浏览器接收到响应后解析执行，混在其中的恶意代码也被执行")]),a._v(" "),s("li",[a._v("恶意代码窃取用户数据并发送到攻击者的网站，或者冒充用户的行为，调用目标网站接口执行攻击者指定的操作")])]),a._v(" "),s("blockquote",[s("p",[a._v("这种攻击常见于带有用户保存数据的网站功能，如论坛发帖、商品评论、用户私信等")])]),a._v(" "),s("h4",{attrs:{id:"反射型xss攻击"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#反射型xss攻击"}},[a._v("#")]),a._v(" 反射型xss攻击")]),a._v(" "),s("ol",[s("li",[a._v("攻击者构造出特殊的 URL，其中包含恶意代码（多作为参数）")]),a._v(" "),s("li",[a._v("用户打开带有恶意代码的 URL 时，网站服务端将恶意代码从 URL 中取出，拼接在 HTML 中返回给浏览器")]),a._v(" "),s("li",[a._v("用户浏览器接收到响应后解析执行，混在其中的恶意代码也被执行")]),a._v(" "),s("li",[a._v("恶意代码窃取用户数据并发送到攻击者的网站，或者冒充用户的行为，调用目标网站接口执行攻击者指定的操作")])]),a._v(" "),s("blockquote",[s("p",[a._v("反射型 XSS 漏洞常见于通过 URL 传递参数的功能，如网站搜索、跳转等。")])]),a._v(" "),s("blockquote",[s("p",[a._v("反射型 XSS 跟存储型 XSS 的区别是：\n"),s("strong",[a._v("存储型 XSS 的恶意代码存在数据库里，反射型 XSS 的恶意代码存在 URL 里。")])])]),a._v(" "),s("p",[a._v("由于需要用户主动打开恶意的 URL 才能生效，攻击者往往会结合多种手段诱导用户点击。\nPOST 的内容也可以触发反射型 XSS，只不过其触发条件比较苛刻（需要构造表单提交页面，并引导用户点击），所以非常少见")]),a._v(" "),s("h4",{attrs:{id:"dom型xss攻击"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#dom型xss攻击"}},[a._v("#")]),a._v(" DOM型xss攻击")]),a._v(" "),s("ol",[s("li",[a._v("攻击者构造出特殊的 URL，其中包含恶意代码")]),a._v(" "),s("li",[a._v("用户打开带有恶意代码的 URL")]),a._v(" "),s("li",[a._v("用户浏览器接收到响应后解析执行，前端 JavaScript 取出 URL 中的恶意代码并执行")]),a._v(" "),s("li",[a._v("恶意代码窃取用户数据并发送到攻击者的网站，或者冒充用户的行为，调用目标网站接口执行攻击者指定的操作")])]),a._v(" "),s("blockquote",[s("p",[a._v("DOM 型 XSS 跟前两种 XSS 的区别：\n"),s("strong",[a._v("DOM 型 XSS 攻击中，取出和执行恶意代码由浏览器端完成，属于前端 JavaScript 自身的安全漏洞，而其他两种 XSS 都属于服务端的安全漏洞。")])])]),a._v(" "),s("h3",{attrs:{id:"xss-防御"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#xss-防御"}},[a._v("#")]),a._v(" XSS 防御")]),a._v(" "),s("p",[a._v("XSS攻击其实就是代码的注入。用户的输入被编译成恶意的程序代码。\n所以，为了防范这一类代码的注入，需要确保用户输入的安全性。\n对于攻击验证，我们可以采用以下两种措施：")]),a._v(" "),s("ol",[s("li",[a._v("编码，就是转义用户的输入，把用户的输入解读为数据而不是代码")]),a._v(" "),s("li",[a._v("校验，对用户的输入及请求都进行过滤检查，如对特殊字符进行过滤，设置输入域的匹配规则等。")])]),a._v(" "),s("p",[a._v("具体比如：")]),a._v(" "),s("ol",[s("li",[a._v("对于验证输入，我们既可以在服务端验证，也可以在客户端验证")]),a._v(" "),s("li",[a._v("对于持久性和反射型攻击，服务端验证是必须的，服务端支持的任何语言都能够做到")]),a._v(" "),s("li",[a._v("对于基于DOM的XSS攻击，验证输入在客户端必须执行，因为从服务端来说，所有发出的页面内容是正常的，只是在客户端js代码执行的过程中才发生可攻击")]),a._v(" "),s("li",[a._v("但是对于各种攻击方式，我们最好做到客户端和服务端都进行处理。")])]),a._v(" "),s("p",[a._v("其它还有一些辅助措施，比如：\n入参长度限制： 通过以上的案例我们不难发现xss攻击要能达成往往需要较长的字符串，因此对于一些可以预期的输入可以通过限制长度强制截断来进行防御。")]),a._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v('对危险字符进行转义，比如：\n1、空格换成加号(+)\n2、正斜杠(/)分隔目录和子目录\n3、问号(?)分隔URL和查询\n4、百分号(%)制定特殊字符\n5、#号指定书签\n6、&号分隔参数\n\n辅助理解：\n我们在用户输入的过程中，过滤掉用户输入的恶劣代码，然后提交给后端，但是如果攻击者绕开前端请求，直接构造请求就不能预防了。而如果在后端写入数据库前，对输入进行过滤，然后把内容给前端，但是这个内容在不同地方就会有不同显示\n例如：\n一个正常的用户输入了 5 < 7 这个内容，在写入数据库前，被转义，变成了 5 < 7。在客户端中，一旦经过了 escapeHTML()，客户端显示的内容就变成了乱码( 5 < 7 )。在前端中，不同的位置所需的编码也不同。\n\n当 5 < 7 作为 HTML 拼接页面时，可以正常显示：```<div title="comment">5 &lt; 7</div>```\n当 5 < 7 通过 Ajax 返回，然后赋值给 JavaScript 的变量时，前端得到的字符串就是转义后的字符。这个内容不能直接用于 Vue 等模板的展示，也不能直接用于内容长度计算。不能用于标题、alert 等 <br/>\n\n可以看到，过滤并非可靠的，下面就要通过防止浏览器执行恶意代码：\n1. 在使用 .innerHTML、.outerHTML、document.write() 时要特别小心，不要把不可信的数据作为 HTML 插到页面上，而应尽量使用 .textContent、.setAttribute() 等。\n2. 如果用 Vue/React 技术栈，并且不使用 v-html/dangerouslySetInnerHTML 功能，就在前端 render 阶段避免 innerHTML、outerHTML 的 XSS 隐患\n3. DOM 中的内联事件监听器，如 location、onclick、onerror、onload、onmouseover 等，<a> 标签的 href 属性，JavaScript 的 eval()、setTimeout()、setInterval() 等，都能把字符串作为代码运行。如果不可信的数据拼接到字符串中传递给这些 API，很容易产生安全隐患，请务必避免。\n\n\x3c!-- 链接内包含恶意代码 --\x3e\n< a href=" ">1</ a>\n <script>\n// setTimeout()/setInterval() 中调用恶意代码\nsetTimeout("UNTRUSTED")\nsetInterval("UNTRUSTED")\n \n// location 调用恶意代码\nlocation.href = \'UNTRUSTED\'\n \n// eval() 中调用恶意代码\neval("UNTRUSTED")\n')])])]),s("h2",{attrs:{id:"csrf-cross-site-request-forgery-跨站请求伪造"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#csrf-cross-site-request-forgery-跨站请求伪造"}},[a._v("#")]),a._v(" CSRF（Cross-site request forgery）跨站请求伪造")]),a._v(" "),s("p",[a._v("攻击者诱导受害者进入第三方网站，在第三方网站中，向被攻击网站发送跨站请求。\n利用受害者在被攻击网站已经获取的注册凭证，绕过后台的用户验证，达到冒充用户对被攻击的网站执行某项操作的目的。")]),a._v(" "),s("h3",{attrs:{id:"csrf攻击"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#csrf攻击"}},[a._v("#")]),a._v(" CSRF攻击")]),a._v(" "),s("ol",[s("li",[a._v("害者登录a.com，并保留了登录凭证（Cookie）")]),a._v(" "),s("li",[a._v("攻击者引诱受害者访问了b.com")]),a._v(" "),s("li",[a._v("b.com 向 a.com 发送了一个请求：a.com/act=xx。浏览器会默认携带a.com的Cookie")]),a._v(" "),s("li",[a._v("a.com接收到请求后，对请求进行验证，并确认是受害者的凭证，误以为是受害者自己发送的请求")]),a._v(" "),s("li",[a._v("a.com以受害者的名义执行了act=xx\n攻击完成，攻击者在受害者不知情的情况下，冒充受害者，让a.com执行了自己定义的操作")])]),a._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v('举例：\nCSRF 可以通过get请求，即通过访问img的页面后，浏览器自动访问目标地址，发送请求。\n同样，也可以设置一个自动提交的表单发送post请求，如下：\n<form action="http://bank.example/withdraw" method=POST>\n    <input type="hidden" name="account" value="xiaoming" />\n    <input type="hidden" name="amount" value="10000" />\n    <input type="hidden" name="for" value="hacker" />\n</form>\n<script> document.forms[0].submit(); <\/script> \n访问该页面后，表单会自动提交，相当于模拟用户完成了一次POST操作。\n还有一种为使用a标签的，需要用户点击链接才会触发。\n访问该页面后，表单会自动提交，相当于模拟用户完成了一次POST操作。\n< a href="http://test.com/csrf/withdraw.php?amount=1000&for=hacker" taget="_blank">\n    重磅消息！！\n<a/>\n')])])]),s("h3",{attrs:{id:"csrf特点"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#csrf特点"}},[a._v("#")]),a._v(" CSRF特点")]),a._v(" "),s("ol",[s("li",[a._v("攻击一般发起在第三方网站，而不是被攻击的网站。被攻击的网站无法防止攻击发生。")]),a._v(" "),s("li",[a._v("攻击利用受害者在被攻击网站的登录凭证，冒充受害者提交操作；在服务器端直接改变数据的值，而不是直接窃取数据。")]),a._v(" "),s("li",[a._v("整个过程攻击者并不能获取到受害者的登录凭证，仅仅是“冒用”。")]),a._v(" "),s("li",[a._v("跨站请求可以用各种方式：图片URL、超链接、CORS、Form提交等等。部分请求方式可以直接嵌入在第三方论坛、文章中，难以进行追踪。")])]),a._v(" "),s("h3",{attrs:{id:"csrf预防"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#csrf预防"}},[a._v("#")]),a._v(" CSRF预防")]),a._v(" "),s("ol",[s("li",[a._v("尽量使用 post 请求")]),a._v(" "),s("li",[a._v("加入验证码（这样能确保是用户行为而不是黑客行为）")]),a._v(" "),s("li",[a._v("验证 referer：\na. referer 是 header的一部分\nb. referer 会告诉我们请求从哪一个网页发来的，黑客伪装用户只能从自己的网站发出请求，对比refere r如果 referer 不一致就拒绝请求")]),a._v(" "),s("li",[a._v("Anti CSRF Token\na. 在from表单或头信息传递一个随机token\nb. token传递在服务端\nc. 服务端通过拦截器验证有效性\nd. 验证失败拒绝请求")])]),a._v(" "),s("h2",{attrs:{id:"sql注入攻击"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#sql注入攻击"}},[a._v("#")]),a._v(" SQL注入攻击")]),a._v(" "),s("p",[a._v("通过将恶意的 Sql查询或添加语句插入到应用的输入参数中，再在后台 Sql服务器上解析执行进行的攻击。")]),a._v(" "),s("h3",{attrs:{id:"sql注入"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#sql注入"}},[a._v("#")]),a._v(" SQL注入")]),a._v(" "),s("ol",[s("li",[a._v("找出SQL漏洞的注入点")]),a._v(" "),s("li",[a._v("判断数据库的类型以及版本")]),a._v(" "),s("li",[a._v("猜解用户名和密码")]),a._v(" "),s("li",[a._v("利用工具查找Web后台管理入口")]),a._v(" "),s("li",[a._v("入侵和破坏")])]),a._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("举例：\nString sql = \"SELECT * FROM t_user WHERE username='\"+userName+\"' AND pwd='\"+password+\"'\"; \n\n密码输入: ' OR '1'='1时，结果如下：\nSELECT * FROM t_user WHERE username='xxx' AND pwd='' OR '1'='1'\n\n此时，等同于不需要密码\n")])])]),s("h3",{attrs:{id:"sql防御"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#sql防御"}},[a._v("#")]),a._v(" SQL防御")]),a._v(" "),s("ol",[s("li",[a._v("严格检查输入变量的类型和格式")]),a._v(" "),s("li",[a._v("过滤和转义特殊字符")]),a._v(" "),s("li",[a._v("对访问数据库的Web应用程序采用Web应用防火墙")])]),a._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[a._v("1. 使用预编译处理输入参数：要防御 SQL 注入，用户的输入就不能直接嵌套在 SQL 语句当中。使用参数化的语句，用户的输入就被限制于一个参数当中， 比如用prepareStatement，则需要在SQL中使用#{}少使用${}\n2. 输入验证：检查用户输入的合法性，以确保输入的内容为正常的数据。数据检查应当在客户端和服务器端都执行，之所以要执行服务器端验证，是因为客户端的校验往往只是减轻服务器的压力和提高对用户的友好度，攻击者完全有可能通过抓包修改参数或者是获得网页的源代码后，修改验证合法性的脚本（或者直接删除脚本），然后将非法内容通过修改后的表单提交给服务器等等手段绕过客户端的校验。因此，要保证验证操作确实已经执行，唯一的办法就是在服务器端也执行验证。但是这些方法很容易出现由于过滤不严导致恶意攻击者可能绕过这些过滤的现象，需要慎重使用。\n3. 错误消息处理：防范 SQL 注入，还要避免出现一些详细的错误消息，恶意攻击者往往会利用这些报错信息来判断后台 SQL 的拼接形式，甚至是直接利用这些报错注入将数据库中的数据通过报错信息显示出来。\n4. 加密处理：将用户登录名称、密码等数据加密保存。加密用户输入的数据，然后再将它与数据库中保存的数据比较，这相当于对用户输入的数据进行了“消毒”处理，用户输入的数据不再对数据库有任何特殊的意义，从而也就防止了攻击者注入 SQL 命令。\n")])])]),s("h1",{attrs:{id:"三、其他方式"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#三、其他方式"}},[a._v("#")]),a._v(" 三、其他方式")]),a._v(" "),s("h5",{attrs:{id:"命令注入"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#命令注入"}},[a._v("#")]),a._v(" 命令注入")]),a._v(" "),s("p",[a._v("Web应用未对用户提交的数据做过滤或者转义，导致服务器端执行了黑客提交的命令。黑客利用登入注入攻击，可以对服务器植入后门、直接反弹shell入侵服务器。")]),a._v(" "),s("h5",{attrs:{id:"目录遍历"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#目录遍历"}},[a._v("#")]),a._v(" 目录遍历")]),a._v(" "),s("p",[a._v("Web应用对相关目录未做访问权限控制，并且未对用户提交的数据做过滤或者转义，导致服务器敏感文件泄露。黑客利用目录遍历攻击，可获取服务器的配置文件，进而入侵服务器。")]),a._v(" "),s("h5",{attrs:{id:"本地文件包含"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#本地文件包含"}},[a._v("#")]),a._v(" 本地文件包含")]),a._v(" "),s("p",[a._v("Web应用对相关目录未做访问权限控制，并且未对用户提交的数据做过滤或者转义，导致服务器敏感文件泄露。黑客利用本地文件包含漏洞，可以获取服务器敏感文件、植入webshell入侵服务器。")]),a._v(" "),s("h5",{attrs:{id:"远程文件包含"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#远程文件包含"}},[a._v("#")]),a._v(" 远程文件包含")]),a._v(" "),s("p",[a._v("Web应用未对用户提交的文件名做过滤或者转义，导致引入远程的恶意文件。黑客利用远程文件包含漏洞，可以加载远程的恶意文件，导致恶意代码执行、获取服务器的权限。")]),a._v(" "),s("h5",{attrs:{id:"木马后门"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#木马后门"}},[a._v("#")]),a._v(" 木马后门")]),a._v(" "),s("p",[a._v("Web应用未对用户提交的数据做过滤或者转义，导致木马代码执行。黑客利用木马后门攻击，可以入侵服务器。")]),a._v(" "),s("h5",{attrs:{id:"缓冲区溢出"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#缓冲区溢出"}},[a._v("#")]),a._v(" 缓冲区溢出")]),a._v(" "),s("p",[a._v("http协议未对请求头部做字节大小限制，导致可以提交大量数据因此可能导致恶意代码被执行。")]),a._v(" "),s("h5",{attrs:{id:"文件上传"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#文件上传"}},[a._v("#")]),a._v(" 文件上传")]),a._v(" "),s("p",[a._v("Web应用未对文件名后缀，上传数据包是否合规，导致恶意文件上传。文件上传攻击，将包含恶意代码的文件上传到服务器，最终导致服务器被入侵。")]),a._v(" "),s("h5",{attrs:{id:"扫描器扫描"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#扫描器扫描"}},[a._v("#")]),a._v(" 扫描器扫描")]),a._v(" "),s("p",[a._v("黑客利用漏洞扫描器扫描网站，可以发现web应用存在的漏洞，最终利用相关漏洞攻击网站。")]),a._v(" "),s("h5",{attrs:{id:"高级爬虫"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#高级爬虫"}},[a._v("#")]),a._v(" 高级爬虫")]),a._v(" "),s("p",[a._v("爬虫自动化程度较高可以识别setcookie等简单的爬虫防护方式。")]),a._v(" "),s("h5",{attrs:{id:"常规爬虫"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#常规爬虫"}},[a._v("#")]),a._v(" 常规爬虫")]),a._v(" "),s("p",[a._v("爬虫自动化程度较低，可以利用一些简单的防护算法识别,如setcookie的方式。")]),a._v(" "),s("h5",{attrs:{id:"敏感信息泄露"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#敏感信息泄露"}},[a._v("#")]),a._v(" 敏感信息泄露")]),a._v(" "),s("p",[a._v("web应用过滤用户提交的数据导致应用程序抛出异常，泄露敏感信息，黑客可能利用泄露的敏感信息进一步攻击网站。")]),a._v(" "),s("h5",{attrs:{id:"服务器错误"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#服务器错误"}},[a._v("#")]),a._v(" 服务器错误")]),a._v(" "),s("p",[a._v("Web应用配置错误，导致服务器报错从而泄露敏感信息，黑客可能利用泄露的敏感信息进一步攻击网站。")]),a._v(" "),s("h5",{attrs:{id:"非法文件下载"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#非法文件下载"}},[a._v("#")]),a._v(" 非法文件下载")]),a._v(" "),s("p",[a._v("Web应用未对敏感文件(密码、配置、备份、数据库等)访问做权限控制，导致敏感文件被下载，黑客利用下载的敏感文件可以进一步攻击网站。")]),a._v(" "),s("h5",{attrs:{id:"第三方组件漏洞"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#第三方组件漏洞"}},[a._v("#")]),a._v(" 第三方组件漏洞")]),a._v(" "),s("p",[a._v("Web应用使用了存在漏洞的第三方组件，导致网站被攻击。")]),a._v(" "),s("h5",{attrs:{id:"xpath注入"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#xpath注入"}},[a._v("#")]),a._v(" XPATH注入")]),a._v(" "),s("p",[a._v("Web应用在用xpath解析xml时未对用户提交的数据做过滤，导致恶意构造的语句被xpath执行。黑客利用xpath注入攻击，可以获取xml文档的重要信息。")]),a._v(" "),s("h5",{attrs:{id:"xml注入"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#xml注入"}},[a._v("#")]),a._v(" XML注入")]),a._v(" "),s("p",[a._v("Web应用程序使用较早的或配置不佳的XML处理器解析了XML文档中的外部实体引用，导致服务器解析外部引入的xml实体。黑客利用xml注入攻击可以获取服务器敏感文件、端口扫描攻击、dos攻击。")]),a._v(" "),s("h5",{attrs:{id:"ldap注入防护"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#ldap注入防护"}},[a._v("#")]),a._v(" LDAP注入防护")]),a._v(" "),s("p",[a._v("Web应用使用ldap协议访问目录，并且未对用户提交的数据做过滤或转义，导致服务端执行了恶意ldap语句，黑客利用ldap注入可获取用户信息、提升权限。")]),a._v(" "),s("h5",{attrs:{id:"ssi注入"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#ssi注入"}},[a._v("#")]),a._v(" SSI注入")]),a._v(" "),s("p",[a._v("Web服务器配置了ssi，并且html中嵌入用户输入，导致服务器执行恶意的ssi命令。黑客利用ssi注入可以执行系统命令。")]),a._v(" "),s("h5",{attrs:{id:"webshell"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#webshell"}},[a._v("#")]),a._v(" Webshell")]),a._v(" "),s("p",[a._v("黑客连接尝试去连接网站可能存在的webshell，黑客可能通过中国菜刀等工具去连接webshell入侵服务器。")]),a._v(" "),s("h5",{attrs:{id:"暴力破解"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#暴力破解"}},[a._v("#")]),a._v(" 暴力破解")]),a._v(" "),s("p",[a._v("黑客在短时间内大量请求某一url尝试猜解网站用户名、密码等信息，黑客利用暴力破解攻击，猜解网站的用户名、密码，可以进一步攻击网站。")]),a._v(" "),s("h5",{attrs:{id:"非法请求方法"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#非法请求方法"}},[a._v("#")]),a._v(" 非法请求方法")]),a._v(" "),s("p",[a._v("Web应用服务器配置允许put请求方法请求，黑客可以构造非法请求方式上传恶意文件入侵服务器。")]),a._v(" "),s("h5",{attrs:{id:"撞库"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#撞库"}},[a._v("#")]),a._v(" 撞库")]),a._v(" "),s("p",[a._v("Web应用对用户登入功能没做验证码验证，黑客可以借助工具结合社工库去猜网站用户名及密码。")]),a._v(" "),s("h5",{attrs:{id:"固定会话"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#固定会话"}},[a._v("#")]),a._v(" 固定会话")]),a._v(" "),s("p",[a._v("Web应用使用固定的cookie会话，导致cookie劫持。")]),a._v(" "),s("h5",{attrs:{id:"ip黑名单"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#ip黑名单"}},[a._v("#")]),a._v(" IP黑名单")]),a._v(" "),s("p",[a._v("某一被确认为恶意ip，被waf拉黑后，所有请求都会被拦截")]),a._v(" "),s("h5",{attrs:{id:"动态ip黑名单"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#动态ip黑名单"}},[a._v("#")]),a._v(" 动态IP黑名单")]),a._v(" "),s("p",[a._v("某一ip发送了较多攻击请求，会被waf自动拉黑一段时间，该时间段内所有的请求都被拦截。")])])}),[],!1,null,null,null);t.default=r.exports}}]);